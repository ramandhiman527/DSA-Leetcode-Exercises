# -*- coding: utf-8 -*-
"""02-Valid-Anagram--Leet-Code-242.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dSoc5WA7L9p-ES7X1livqCHaQY-CeujR

#### ***Solution 01 (Hash Map or Frequency Map) --> giving O(n)***
"""

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s) != len(t):
            return False
        freq_s, freq_t = {}, {}

        for i in range(len(s)):
            freq_s[s[i]] = 1 + freq_s.get(s[i], 0)
            freq_t[t[i]] = 1 + freq_t.get(t[i], 0)
        for c in freq_s:
            if freq_s[c] != freq_t.get(c, 0):
                return False

        return True

"""#### ***Solution 02 (Sorting of strings) --> giving O(nlogn) time.***"""

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s) != len(t):
            return False
        return sorted(s) == sorted(t)