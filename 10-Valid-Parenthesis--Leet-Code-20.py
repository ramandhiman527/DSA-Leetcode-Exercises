# -*- coding: utf-8 -*-
"""10-Valid-Parenthesis--Leet-Code-20

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ReKAlhMwl0gfGehB21g2Kp95CKHgn5dd

To solve this problem using stack, iterate over the characters of the string. If the character is an opening bracket, push it onto the stack. 
    If the character is a closing bracket, pop the top element from the stack and check if it matches the opening bracket of the same type. 
    If not, return false. 
    After the iteration, if the stack is empty, return true, else return false.
"""
# Solution 01

class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        mapping = {")": "(", "}": "{", "]": "["}  # mapping dictionary is used to map each closing bracket to its corresponding opening bracket
        for char in s:
            if char in mapping:
                top_element = stack.pop() if stack else '#'
                if mapping[char] != top_element:
                    return False
            else:
                stack.append(char)
        return True if not stack else False

# Solution 02

class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        mapping = {")": "(", "}": "{", "]": "["}
        for char in s:
            if char in mapping:
                if stack and stack[-1] == mapping[char]:
                    stack.pop()
                else:
                    return False
            else:
                stack.append(char)
        return True if not stack else False