# -*- coding: utf-8 -*-
"""07-Invert-Binary-Tree--LeetCode-226

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qhnbaxq086rwMtqW1lZRWehYYnSdkN3P

# **Solution**
To invert a binary tree, we need to swap the left and right subtrees of each node. We can do this recursively starting from the root of the tree. If the root is null, then we return null. Otherwise, we swap its left and right subtrees, and then recursively invert the left and right subtrees. Finally, we return the root of the inverted tree.

    Time --> O(n)
"""

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return None

        left_subtree = self.invertTree(root.left)
        right_subtree = self.invertTree(root.right)

        root.left = right_subtree
        root.right = left_subtree
        return root