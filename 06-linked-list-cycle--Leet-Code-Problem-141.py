# -*- coding: utf-8 -*-
"""06-Linked-List-Cycle--Leet-Code-Problem-141.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HkfIvigRrKtmwcMTPjdZ_HfdCLadX_1c

**Solution For Linked List Cycle Problem using Two Pointer Approach**

***The given code uses a two-pointer approach to detect a cycle in a linked list.***

***The slow pointer moves one step at a time, while the fast pointer moves two steps at a time.*** 

    If there is a cycle, the fast pointer will eventually catch up to the slow pointer, indicating the presence of a cycle. 

    If there is no cycle, the fast pointer will reach the end of the list, and the function returns False.
"""

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        slow, fast = head, head

        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            if slow == fast:
                return True

        return False